(Chad Duffey )

[0x00400000]	0x3c011001  lui $1, 4097 [arr]              ; 12: la	$t0, arr					#address of start of array
[0x00400004]	0x34280008  ori $8, $1, 8 [arr]
[0x00400008]	0x34090000  ori $9, $0, 0                   ; 13: li	$t1, 0						#starting value for index
[0x0040000c]	0x340a0014  ori $10, $0, 20                 ; 14: li	$t2, 20						#maximum value of index
[0x00400010]	0x340c0004  ori $12, $0, 4                  ; 15: li	$t4, 4						#load an offset value
[0x00400014]	0x3c011001  lui $1, 4097 [arr]              ; 16: la	$t0, arr					#put address of arr into $t0
[0x00400018]	0x34280008  ori $8, $1, 8 [arr]
[0x0040001c]	0x8d0d0000  lw $13, 0($8)                   ; 19: lw	$t5, 0($t0)					#load array value
[0x00400020]	0x01ad6820  add $13, $13, $13               ; 20: add	$t5, $t5, $t5					#double the array value
[0x00400024]	0x3c011001  lui $1, 4097 [value]            ; 21: la	$t6, value					#load address of the value variable
[0x00400028]	0x342e0004  ori $14, $1, 4 [value]
[0x0040002c]	0x8dcf0000  lw $15, 0($14)                  ; 22: lw	$t7, 0($t6)					#load the value variable
[0x00400030]	0x01af6820  add $13, $13, $15               ; 23: add	$t5, $t5, $t7					#add the "value" and the current array
[0x00400034]	0xad0d0000  sw $13, 0($8)                   ; 24: sw	$t5, 0($t0)					#store the new value in original location
[0x00400038]	0x21290001  addi $9, $9, 1                  ; 25: addi	$t1, $t1, 1					#add 1 to index
[0x0040003c]	0x010c4020  add $8, $8, $12                 ; 26: add	$t0, $t0, $t4					#add the offset to the memory address for next run
[0x00400040]	0x012a082a  slt $1, $9, $10                 ; 27: blt	$t1, $t2, for_loop				#keep doing loop if less than 20
[0x00400044]	0x1420fff6  bne $1, $0, -40 [for_loop-0x00400044]